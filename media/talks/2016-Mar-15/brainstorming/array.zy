// is array declaration possible

(a[1 2] = 23)

(b[0] = 2.4)

// and we need a complex number parsing notation

3+2i

5+4j

5.5+4.6i

// and how about a scientific notation?

3.3e9+2.2e-1i

// simple math expressions (3+3)*3 mod 4 would be great

(infix ``)

<< 3 + 5 / 4 >>

translates to

(+ 3 (/ 5 4))

can we use @ and ~ outside of macros to mean something else?


(a[1 2] = 23) // how about if the a is still the controller;

a is an object that is being sent a message [1 2], it then
knows to return a reference to a setable element.

is defining a grammar like defining a type?

can we parse a type and parse a grammar in the same way?

claim of pratt parser is dynamic extensibility: truly
extensible languages.

would this imply extensible types?

haskell:

data Bool = False | True

I already have (bool ) the record type. 

lets have a general system for sigil symbols, somewhat perl like

#symbol
$symbol
?symbol
@symbol
~symbol

can we have
@symbol: as an element in the array? sure why not?


The goal with a: is to avoid having to deal with (quote a) everywhere, and to have it print back the same way as it was provided in the first place. Do we look up the key by querying for 'a' or for 'a:' then? by 'a'. So the 'a' must be what is entered into the hash table.

But if we want the symbol to display as a: then it needs to be its own symbol.
Because the suffix makes it lookup differently. problem: searching on 'a'
 name alone won't find 'a:' in the hash table.

if we leave off distinguishing characters ':' from what is hashed, then our hash
table won't carry those attributes along, i.e. we'll lookup the same symbol

the description wants a: to be a sigil like symbol. But upon entry into the hash table, we need to enter the symbol 'a'.


how about dot symbols referring to these symbols

.?symbol .... hmm no.

I like the idea of #symbols being special kind of thing,
like maybe they are objects that have their own lookup rules.

abilty to define grammars, and parse grammars. where
the #symbol represents a non-terminal in the grammar.

one of these can be a type variable.

user-defined symbols
type variables

?symbols

(#a[3 3] = 3+i)

can we get back : so that := works?

well, then what happens to (a:3 b:2) 

we could make := distict from; it already is.

-------------

querying data, including querying data defined in the language itself.

constructing a timeseries.

any up-spike resets the prediction, and invalidates it for at least K points.

(K is what?)

query for all of a particular type of event
 - within a parituclar window of time
   - with a specific game or customer_id

data table like syntax?

what are the operations:
 read : select-where
 read-for-update: update-where
 filter by function
 group by function





